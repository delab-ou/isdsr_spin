void moveQueue(int *perm, Q0* _now, Q0* _tmp){
  (*moveq[(_now->_t-3)*(NODES-3)+(_tmp->_t-3)])(perm,_now,_tmp);
}

void moveCorrespondingNode(int *perm,struct packet *_p){
  if((3<=_p->next) && (_p->next <= NODES)){
    _p->next=perm[_p->next-3];
  }
  int cnt=0;
  for(cnt=0;cnt<NODES;cnt++){
    if((3<=_p->ri[cnt]) && (_p->ri[cnt] <= NODES)){
      _p->ri[cnt]=perm[_p->ri[cnt]-3];
    }
  }
}
void movePacket(int *perm, struct packet *_now, struct packet *_tmp){
  int cnt=0;
  _tmp->type=_now->type;
  _tmp->src=_now->src;
  _tmp->dest=_now->dest;
  _tmp->next=_now->next;
  _tmp->hops=_now->hops;
  _tmp->rilen=_now->rilen;
  for(cnt=0;cnt<NODES;cnt++){
    _tmp->ri[cnt]=_now->ri[cnt];
  }
  moveCorrespondingNode(perm,_tmp);
}

void movePackets(int *perm, P2 *_now, P2 *_tmp){
  movePacket(perm,&(_now->pkts),&(_tmp->pkts));
  movePacket(perm,&(_now->pktr),&(_tmp->pktr));
  movePacket(perm,&(_now->tmp),&(_tmp->tmp));
}

void moveSrcPackets(int *perm, P0* _tmp){
  moveCorrespondingNode(perm,&(_tmp->pktr));
  moveCorrespondingNode(perm,&(_tmp->pkts));
  moveCorrespondingNode(perm,&(_tmp->tmp));
}
void moveDestPackets(int *perm, P1* _tmp){
  moveCorrespondingNode(perm,&(_tmp->pktr));
  moveCorrespondingNode(perm,&(_tmp->pkts));
  moveCorrespondingNode(perm,&(_tmp->tmp));
}


void moveProcess(int *perm, P2 *_now, P2* _tmp){

    _tmp->_p=_now->_p;
    _tmp->exist=_now->exist;
    _tmp->forward=_now->forward;
    _tmp->next=_now->next;
    _tmp->cnt=_now->cnt;
    movePackets(perm,_now,_tmp);
}

void moveState(int *perm, struct State *_now,struct State *_tmp,int id,short *pos,short *qos){
  P2 *_nowP=((P2 *)(((unsigned char *)_now)+(int)pos[perm[id-3]]));
  P2 *_tmpP=((P2 *)(((unsigned char *)_tmp)+(int)pos[id]));
  Q0 *_nowQ=((Q0 *)(((unsigned char *)_now)+(int)qos[perm[id-3]-1]));
  Q0 *_tmpQ=((Q0 *)(((unsigned char *)_tmp)+(int)qos[id-1]));
  moveProcess(perm,_nowP,_tmpP);
  moveQueue(perm,_nowQ,_tmpQ);
}
void replace(int *perm, struct State *_now, struct State* _tmp,short *pos, short *qos){
  //a node i in state _tmp is assigned by a node perm[i-3] in a state _now
  int cnt=3;
  for(;cnt<=NODES;cnt++){
    moveState(perm,_now,_tmp,cnt,pos,qos);
  }
  Q1 *_sQ=((Q1 *)(((unsigned char *)_tmp)+(int)qos[0]));
  Q2 *_dQ=((Q2 *)(((unsigned char *)_tmp)+(int)qos[1]));
  P0 *_sP=((P0 *)(((unsigned char *)_tmp)+(int)pos[1]));
  P1 *_dP=((P1 *)(((unsigned char *)_tmp)+(int)pos[2]));
  moveSrcPackets(perm,_sP);
  moveDestPackets(perm,_dP);
  moveSrcQ(perm,_sQ);
  moveDestQ(perm,_dQ);
}

int isSameState(char* s1,char *s2, int size){
  int cnt=0;
  int ret=1;
  for(;cnt<size;cnt++){
    if(s1[cnt]!=s2[cnt]){
      ret=0;
      break;
    }
  }
  return ret;
}
int routeLength(struct State *s,short *pos){
  P0 *src=((P0 *)(((unsigned char *)s)+(int)pos[1]));
  if(src->found==1){
    return src->pktr.hops;
  }
  return 0;
}
