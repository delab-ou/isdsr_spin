
void printQueue(struct State *s,short *qos, int id){
  Q0 *q=((Q0 *)(((unsigned char *)s)+(int)qos[id-1]));
  (*pq[id-1])(q,id);
}
void printAllQueue(struct State *s,short *qos){
  int i=0;
  for(i=1;i<=NODES;i++){
    printQueue(s,qos,i);
  }
}
void printProcessP0(struct P0* p){
  printf("size of P0:%lu----------\n",sizeof(struct P0));
  printf("pid:%u, ptype:%u,state:%u,id:%u,",
          p->_pid,p->_t,p->_p,p->id);
  printf("found:%u,retry:%d\n",p->found,p->retry);
  printf("d:%u,next:%u\n",p->d,p->next);
  printf("sending packet:");
  printPacket(&(p->pkts));
  printf("received packet:");
  printPacket(&(p->pktr));
  printf("tmp packet:");
  printPacket(&(p->tmp));
  printf("\n");
}
void printProcessP1(struct P1* p){
  printf("size of P1:%lu----------\n",sizeof(struct P1));
  printf("pid:%u, ptype:%u,state:%u,id:%u,",
          p->_pid,p->_t,p->_p,p->id);
  printf("exist:%u,forward:%u\n",p->exist,p->forward);
  printf("sending packet:");
  printPacket(&(p->pkts));
  printf("received packet:");
  printPacket(&(p->pktr));
  printf("tmp packet:");
  printPacket(&(p->tmp));
  printf("\n");

}
void printProcessP2(struct P2* p ){
  printf("size of P2:%lu----------\n",sizeof(struct P2));
  printf("pid:%u, ptype:%u,state:%u,id:%u,",
          p->_pid,p->_t,p->_p,p->id);
  printf("exist:%u,forward:%u\n",p->exist,p->forward);
  printf("next:%u\n",p->next);
  printf("sending packet:");
  printPacket(&(p->pkts));
  printf("received packet:");
  printPacket(&(p->pktr));
  printf("tmp packet:");
  printPacket(&(p->tmp));
  printf("\n");
}

void printProcesses(struct State *s, short *pos){
  struct P0 *src=((P0 *)(((unsigned char *)s)+(int)pos[1]));
  struct P1 *dest=((P1 *)(((unsigned char *)s)+(int)pos[2]));
  struct P2 *nodes[NODES-2];
  int cnt=0;
  for(cnt=3;cnt<=NODES;cnt++){
    nodes[cnt-3]=((P2 *)(((unsigned char *)s)+(int)pos[cnt]));
  }
  printProcessP0(src);
  printProcessP1(dest);
  for(cnt=0;cnt<(NODES-2);cnt++){
    printProcessP2(nodes[cnt]);
  }
}


void printState(struct State *s,short *pos, short *qos){
  printf("_nr_pr=%d,_nr_qs=%d,_a_t=%d,_vsz=%d\n",s->_nr_pr,s->_nr_qs,s->_a_t,s->_vsz);
  printProcesses(s,pos);
  printAllQueue(s,qos);
}

void printDifferences(char *s1,char *s2,int size){
  int cnt=0;
  int num=0;
  int ret=1;
  for(;cnt<size;cnt++){
    if(cnt%8==0){
      printf(" : %d\n",cnt);
    }
    printf("%u:%u,",0x00ff&s1[cnt],0x00ff&s2[cnt]);

    if(s1[cnt]!=s2[cnt]){
      //return 0;
      printf("s1[cnt]=%d:s2[cnt]=%d<-",s1[cnt],s2[cnt]);
      num++;
      ret=0;
    }
  }
  printf("number of difference is %d\n",num);
}
